CHANGE LOG

v1.3
API CHANGES:
- ImageLoader objects are now created via ImageLoader.build...() methods rather than directly constructed.
- The ImageLoaderSupport and AbstractImageLoader classes have been removed. All ImageLoader classes now directly inherit from ImageLoader.
- The import has changed for the Options object. This class now directly belongs to the ImageLoader class.

New Features:
- Data usage, battery life and processing power savings! The image system now automatically cancels image requests for Activities and Fragments that have been destroyed, without cancelling potentially useful requests for the same URI.
- The AdapterImagePrecacher is now available for use. This class helps manage what images need to be downloaded and precached, and it comes with a ton of performance saving features. Helps to vastly smooth out adapter view scrolling.
- You can now request bitmaps without an ImageView. Methods: loadImage(String uri, BitmapListener listener), loadImage(String uri, Options options, BitmapListener listener)
- Image can now be requested via an ImageRequest object. This API will simplify some of the logic involved when requesting images with complicated options.
- There is a new loadImage request that takes a listener without an Options object. This method will use the default options for its requests and report back to the listener when the request is complete.
- Widgets are now supported. A WidgetImageLoader can now be constructed via the method ImageLoader.buildWidgetImageLoader(Object key, Context context).

Bug Fixes:
- Fixed a crash caused by a ConcurrentModificationException.
- Resolved a case where references to Activities or Fragments would be retained briefly after destruction.

v1.2
- XL Studio compatibility.

v1.1.1
- Critical bug fix: Bad comparator logic was causing a crash if images lingered in the disk cache for several weeks.

v1.1.0
- URIs can now refer to files on disk. These images will be cached in the memory cache.
- A utility has been added called the ImagePrecacheAssistant. It can be used to rapidly implement precaching in adapters. Please note this is an early version that may undergo heavy API changes in the near future.
- The SampleSize calculation code has been completely re-written. The image system now loads images significantly faster and uses less memory when large images are being loaded into smaller views.
- A new option called "ScalingPreference" has been added. This option allows developers to choose what logic is used when scaling down images.
- A new option called "preferedConfig" has been added. This option allows developers to change the pixel format of decoded bitmaps.
- An API was added that allows developers to stub their own network libraries into the image system.
- The ImageLoader Javadoc has been updated. The Javadoc comments should now more accurately describe the functionality of API calls.
- Unit test coverage has been expanded.
- Refactored some of the system's internals. Future patches should take less time to develop.
- Bug fixes.

v1.0.0
- The image library is now stable.
